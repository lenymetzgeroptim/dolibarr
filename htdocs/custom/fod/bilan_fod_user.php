<?php
/* Copyright (C) 2021 Lény Metzger  <leny-07@hotmail.fr>
 *
 * Licence information
 */

/**
 *   	\file       bilan_fod_user.php
 *		\ingroup    fod
 *		\brief      Permet de voir les données des intervenants sur 12 mois
 */

// Load Dolibarr environment
$res = 0;
// Try main.inc.php into web root known defined into CONTEXT_DOCUMENT_ROOT (not always defined)
if (!$res && !empty($_SERVER["CONTEXT_DOCUMENT_ROOT"])) {
	$res = @include $_SERVER["CONTEXT_DOCUMENT_ROOT"]."/main.inc.php";
}
// Try main.inc.php into web root detected using web root calculated from SCRIPT_FILENAME
$tmp = empty($_SERVER['SCRIPT_FILENAME']) ? '' : $_SERVER['SCRIPT_FILENAME']; $tmp2 = realpath(__FILE__); $i = strlen($tmp) - 1; $j = strlen($tmp2) - 1;
while ($i > 0 && $j > 0 && isset($tmp[$i]) && isset($tmp2[$j]) && $tmp[$i] == $tmp2[$j]) {
	$i--; $j--;
}
if (!$res && $i > 0 && file_exists(substr($tmp, 0, ($i + 1))."/main.inc.php")) {
	$res = @include substr($tmp, 0, ($i + 1))."/main.inc.php";
}
if (!$res && $i > 0 && file_exists(dirname(substr($tmp, 0, ($i + 1)))."/main.inc.php")) {
	$res = @include dirname(substr($tmp, 0, ($i + 1)))."/main.inc.php";
}
// Try main.inc.php using relative path
if (!$res && file_exists("../main.inc.php")) {
	$res = @include "../main.inc.php";
}
if (!$res && file_exists("../../main.inc.php")) {
	$res = @include "../../main.inc.php";
}
if (!$res && file_exists("../../../main.inc.php")) {
	$res = @include "../../../main.inc.php";
}
if (!$res) {
	die("Include of main fails");
}

require_once DOL_DOCUMENT_ROOT.'/core/class/html.formcompany.class.php';
require_once DOL_DOCUMENT_ROOT.'/core/lib/date.lib.php';
require_once DOL_DOCUMENT_ROOT.'/core/lib/company.lib.php';
require_once DOL_DOCUMENT_ROOT.'/custom/fod/class/extendeduser.class.php';
require_once DOL_DOCUMENT_ROOT.'/custom/fod/class/fod.class.php';
// load fod libraries
require_once __DIR__.'/class/data_intervenant.class.php';


// Load translation files required by the page
$langs->loadLangs(array("fod@fod", "other"));

//$action     = GETPOST('action', 'aZ09') ?GETPOST('action', 'aZ09') : 'view'; // The action 'add', 'create', 'edit', 'update', 'view', ...
//$massaction = GETPOST('massaction', 'alpha'); // The bulk action (combo box choice into lists)
//$show_files = GETPOST('show_files', 'int'); // Show files area generated by bulk actions ?
//$confirm    = GETPOST('confirm', 'alpha'); // Result of a confirmation
//$cancel     = GETPOST('cancel', 'alpha'); // We click on a Cancel button
//$toselect   = GETPOST('toselect', 'array'); // Array of ids of elements selected into a list
//$contextpage = GETPOST('contextpage', 'aZ') ? GETPOST('contextpage', 'aZ') : 'data_intervenantlist'; // To manage different context of search
//$backtopage = GETPOST('backtopage', 'alpha'); // Go back to a dedicated page
//$optioncss = GETPOST('optioncss', 'aZ'); // Option for the css output (always '' except when 'print')

//$id = GETPOST('id', 'int');

// Load variable for pagination
$limit = GETPOST('limit', 'int') ? GETPOST('limit', 'int') : $conf->liste_limit;
$sortfield = GETPOST('sortfield', 'aZ09comma');
$sortorder = GETPOST('sortorder', 'aZ09comma');
$page = GETPOSTISSET('pageplusone') ? (GETPOST('pageplusone') - 1) : GETPOST("page", 'int');
if (empty($page) || $page < 0 || GETPOST('button_search', 'alpha') || GETPOST('button_removefilter', 'alpha')) {
	// If $page is not defined, or '' or -1 or if we click on clear filters
	$page = 0;
}
$offset = $limit * $page;
$pageprev = $page - 1;
$pagenext = $page + 1;

// Initialize technical objects
$object = new Data_intervenant($db);
$extrafields = new ExtraFields($db);
$fod = new Fod($db);
//$diroutputmassaction = $conf->fod->dir_output.'/temp/massgeneration/'.$user->id;
//$hookmanager->initHooks(array('data_intervenantlist')); // Note that conf->hooks_modules contains array

// Fetch optionals attributes and labels
//$extrafields->fetch_name_optionals_label($object->table_element);
//$extrafields->fetch_name_optionals_label($object->table_element_line);

//$search_array_options = $extrafields->getOptionalsFromPost($object->table_element, '', 'search_');

// Default sort order (if not yet defined by previous GETPOST)
$var = 1;
if (!$sortfield) {
	reset($object->fields);					// Reset is required to avoid key() to return null.
	$sortfield = "t.fk_user"; // Set here default search field. By default 1st field in definition.
	$var = 0;
}
if (!$sortorder) {
	$sortorder = "ASC";
}


// Date 
$year_end = strftime("%Y", dol_now());
$month_end = strftime("%m", dol_now());
$day_end = strftime("%d", dol_now());
$year_start = $year_end-1;
$month_start = $month_end;
$day_start = $day_end;

$date_start = dol_mktime(0, 0, 0, $month_end, $day_end, $year_start);
$date_end = dol_mktime(23, 59, 59, $month_end, $day_end, $year_end);

// Initialize array of search criterias
$search_all = GETPOST('search_all', 'alphanohtml') ? GETPOST('search_all', 'alphanohtml') : GETPOST('sall', 'alphanohtml');
$search = array();
foreach ($object->fields as $key => $val) {
	if ($key == 'fk_user' || $key == 'date') {
		if (GETPOST('search_'.$key, 'alpha') !== '') {
			$search[$key] = GETPOST('search_'.$key, 'alpha');
		}
		if (preg_match('/^(date|timestamp|datetime)/', $val['type'])) {
			if (!empty(GETPOST('search_'.$key.'_dtstartmonth', 'int')) && !empty(GETPOST('search_'.$key.'_dtstartday', 'int')) && !empty(GETPOST('search_'.$key.'_dtstartyear', 'int'))){
				$search[$key.'_dtstart'] = dol_mktime(0, 0, 0, GETPOST('search_'.$key.'_dtstartmonth', 'int'), GETPOST('search_'.$key.'_dtstartday', 'int'), GETPOST('search_'.$key.'_dtstartyear', 'int'));
				$search[$key.'_dtend'] = dol_mktime(23, 59, 59, GETPOST('search_'.$key.'_dtendmonth', 'int'), GETPOST('search_'.$key.'_dtendday', 'int'), GETPOST('search_'.$key.'_dtendyear', 'int'));
			}
			else if ($var){
				if (!empty(GETPOST('search_date_dtstart', 'int')) && !empty(GETPOST('search_date_dtend', 'int'))){
					$search[$key.'_dtstart'] = GETPOST('search_date_dtstart', 'int');
					$search[$key.'_dtend'] = GETPOST('search_date_dtend', 'int');
				}
			}
			else {
				$search[$key.'_dtstart'] = $date_start;
				$search[$key.'_dtend'] = $date_end;
			}
		}
	}
}


// List of fields to search into when doing a "search in all"
/*$fieldstosearchall = array();
foreach ($object->fields as $key => $val) {
	if ($key == 'fk_user' ||$key == 'date') {
		if (!empty($val['searchall'])) {
			$fieldstosearchall['t.'.$key] = $val['label'];
		}
	}
}
if (!empty($val['searchall'])) {
	$fieldstosearchall['total_dose'] = $fod->fields['fk_project']['label'];
}*/

// Definition of array of fields for columns
$arrayfields = array();
foreach ($object->fields as $key => $val) {
	if ($key == 'fk_user' || $key == 'date') {
		if (!empty($val['visible'])) {
			$visible = (int) dol_eval($val['visible'], 1);
			$arrayfields['t.'.$key] = array(
				'label'=>$val['label'],
				'checked'=>(($visible < 0) ? 0 : 1),
				'enabled'=>($visible != 3 && dol_eval($val['enabled'], 1)),
				'position'=>$val['position'],
				'help'=> isset($val['help']) ? $val['help'] : ''
			);
		}
	}
}


// Extra fields
include DOL_DOCUMENT_ROOT.'/core/tpl/extrafields_list_array_fields.tpl.php';

$object->fields = dol_sort_array($object->fields, 'position');
$arrayfields = dol_sort_array($arrayfields, 'position');

$permissiontoreadall = $user->rights->fod->data_intervenant->readAll;
$permissiontoadd = $user->rights->fod->data_intervenant->write;
$permissiontodelete = $user->rights->fod->data_intervenant->delete;

// Security check
if (empty($conf->fod->enabled)) {
	accessforbidden('Module non activé');
}
if(!$user->rights->fod->data_intervenant->readAll){
		accessforbidden("Vous n'êtes pas autorisés à voir ces données");
}



/*
 * Actions
 */

// Selection of new fields
include DOL_DOCUMENT_ROOT.'/core/actions_changeselectedfields.inc.php';

// Purge search criteria
if (GETPOST('button_removefilter_x', 'alpha') || GETPOST('button_removefilter.x', 'alpha') || GETPOST('button_removefilter', 'alpha')) { // All tests are required to be compatible with all browsers
	foreach ($object->fields as $key => $val) {
		if ($key == 'fk_user' ||$key == 'date') {
			$search[$key] = '';
			if (preg_match('/^(date|timestamp|datetime)/', $val['type'])) {
				$search[$key.'_dtstart'] = '';
				$search[$key.'_dtend'] = '';
			}
		}
	}
}




/*
 * View
 */

$form = new Form($db);

$now = dol_now();

$title = $langs->trans('RapportDataIntervenant');

// Build and execute select
// --------------------------------------------------------------------
$sql = 'SELECT ';
$sql .= 't.fk_user, sum(t.dose) as total_dose';

// Add fields from hooks
$parameters = array();
$reshook = $hookmanager->executeHooks('printFieldListSelect', $parameters, $object); // Note that $action and $object may have been modified by hook
$sql .= preg_replace('/^,/', '', $hookmanager->resPrint);
$sql = preg_replace('/,\s*$/', '', $sql);
$sql .= " FROM ".MAIN_DB_PREFIX.$object->table_element." as t";
if (isset($extrafields->attributes[$object->table_element]['label']) && is_array($extrafields->attributes[$object->table_element]['label']) && count($extrafields->attributes[$object->table_element]['label'])) {
	$sql .= " LEFT JOIN ".MAIN_DB_PREFIX.$object->table_element."_extrafields as ef on (t.rowid = ef.fk_object)";
}
//$sql .= ' INNER JOIN '.MAIN_DB_PREFIX.'fod_fod as f ON f.rowid=t.fk_fod';
// Add table from hooks
$parameters = array();
$reshook = $hookmanager->executeHooks('printFieldListFrom', $parameters, $object); // Note that $action and $object may have been modified by hook
$sql .= $hookmanager->resPrint;
if ($object->ismultientitymanaged == 1) {
	$sql .= " WHERE t.entity IN (".getEntity($object->element).")";
} else {
	$sql .= " WHERE 1 = 1";
}

foreach ($search as $key => $val) {
	if (array_key_exists($key, $object->fields)) {
		if ($key == 'status' && $search[$key] == -1) {
			continue;
		}
		$mode_search = (($object->isInt($object->fields[$key]) || $object->isFloat($object->fields[$key])) ? 1 : 0);
		if ((strpos($object->fields[$key]['type'], 'integer:') === 0) || (strpos($object->fields[$key]['type'], 'sellist:') === 0) || !empty($object->fields[$key]['arrayofkeyval']) || $key=='fk_project') {
			if ($search[$key] == '-1' || ($search[$key] === '0' && (empty($object->fields[$key]['arrayofkeyval']) || !array_key_exists('0', $object->fields[$key]['arrayofkeyval'])))) {
				$search[$key] = '';
			}
			$mode_search = 2;
		}
		if ($search[$key] != '') {
			$sql .= natural_search($key, $search[$key], (($key == 'status') ? 2 : $mode_search));
		}
	} 
	else {
		if ($key == 'date_dtstart' || $key == 'date_dtend') {
			if (!empty($search[$key])){
				$columnName = preg_replace('/(_dtstart|_dtend)$/', '', $key);
				if (preg_match('/^(date|timestamp|datetime)/', $object->fields[$columnName]['type'])) {
					if (preg_match('/_dtstart$/', $key)) {
						$sql .= " AND t.".$columnName." >= '".$db->idate($search[$key])."'";
					}
					if (preg_match('/_dtend$/', $key)) {
						$sql .= " AND t." . $columnName . " <= '" . $db->idate($search[$key]) . "'";
					}
				}
			}
		}
	}
}
$sql .= ' GROUP BY t.fk_user';
if ($search_all) {
	$sql .= natural_search(array_keys($fieldstosearchall), $search_all);
}

//$sql.= dolSqlDateFilter("t.field", $search_xxxday, $search_xxxmonth, $search_xxxyear);

$sql .= $db->order($sortfield, $sortorder);

// Count total nb of records
$nbtotalofrecords = '';
if (empty($conf->global->MAIN_DISABLE_FULL_SCANLIST)) {
	$resql = $db->query($sql);
	$nbtotalofrecords = $db->num_rows($resql);
	if (($page * $limit) > $nbtotalofrecords) {	// if total of record found is smaller than page * limit, goto and load page 0
		$page = 0;
		$offset = 0;
	}
}

// if total of record found is smaller than limit, no need to do paging and to restart another select with limits set.
if (is_numeric($nbtotalofrecords) && ($limit > $nbtotalofrecords || empty($limit))) {
	$num = $nbtotalofrecords;
} else {
	if ($limit) {
		$sql .= $db->plimit($limit + 1, $offset);
	}

	$resql = $db->query($sql);
	if (!$resql) {
		dol_print_error($db);
		exit;
	}

	$num = $db->num_rows($resql);
}


// Output page
// --------------------------------------------------------------------

llxHeader('', $title, $help_url, '', 0, 0, $morejs, $morecss, '', '');

$arrayofselected = is_array($toselect) ? $toselect : array();
$param = '';

/*if (!empty($contextpage) && $contextpage != $_SERVER["PHP_SELF"]) {
	$param .= '&contextpage='.urlencode($contextpage);
}*/
if ($limit > 0 && $limit != $conf->liste_limit) {
	$param .= '&limit='.urlencode($limit);
}
foreach ($search as $key => $val) {
	if (is_array($search[$key]) && count($search[$key])) {
		foreach ($search[$key] as $skey) {
			$param .= '&search_'.$key.'[]='.urlencode($skey);
		}
	} else {
		$param .= '&search_'.$key.'='.urlencode($search[$key]);
	}
}

/*if ($optioncss != '') {
	$param .= '&optioncss='.urlencode($optioncss);
}*/

print '<form method="POST" id="searchFormList" action="'.$_SERVER["PHP_SELF"].'">'."\n";
if ($optioncss != '') {
	print '<input type="hidden" name="optioncss" value="'.$optioncss.'">';
}
print '<input type="hidden" name="token" value="'.newToken().'">';
print '<input type="hidden" name="formfilteraction" id="formfilteraction" value="list">';
//print '<input type="hidden" name="action" value="list">';
print '<input type="hidden" name="sortfield" value="'.$sortfield.'">';
print '<input type="hidden" name="sortorder" value="'.$sortorder.'">';
print '<input type="hidden" name="page" value="'.$page.'">';
print '<input type="hidden" name="contextpage" value="'.$contextpage.'">';

//$newcardbutton = dolGetButtonTitle($langs->trans('New'), '', 'fa fa-plus-circle', dol_buildpath('/fod/data_intervenant_card.php', 1).'?action=create&backtopage='.urlencode($_SERVER['PHP_SELF']), '', $permissiontoadd);

print_barre_liste($title, $page, $_SERVER["PHP_SELF"], $param, $sortfield, $sortorder, $massactionbutton, $num, $nbtotalofrecords, 'object_fod_32@fod', 0, $newcardbutton, '', $limit, 0, 0, 1);

print '<div style="text-align: center;">';
$pourcentage = ($fod->getDose12moisTotale()/$fod->getCdDAnnuelle())*100;
if (($fod->getDose12moisTotale() >= round($fod->getCdDAnnuelle() * ($conf->global->FOD_Pourcentage_RisqueDepassement_total12mois / 100), 3)) && ($fod->getDose12moisTotale() <= $fod->getCdDAnnuelle())){
	$value = 'ATTENTION : Risque de dépassement de la CdD annuelle OPTIM Industries ('.$fod->getCdDAnnuelle().' mSv), prendre les dispositions pour la respecter ('.round($pourcentage, 1).'%)';
	print '<td class="left" style="padding-left: 0px;"><span class="badge  badge-status8 badge-status" title="'.$value.'" style="padding-top: 0.40em;padding-bottom: 0.40em;">'.'Dose 12 derniers mois (tous les intervenants) : '.number_format($fod->getDose12moisTotale(),3).' mSv</span></td>';
}
else if ($fod->getDose12moisTotale() > $fod->getDose12moisTotale()){
	$value = 'ATTENTION : Dépassement de la CdD annuelle OPTIM Industries ('.$fod->getDose12moisTotale().' mSv), autorisation accès en ZC suspendue ('.round($pourcentage, 1).'%)';
	print '<td class="left" style="padding-left: 0px;"><span class="badge  badge-status8 badge-status" title="'.$value.'" style="padding-top: 0.40em;padding-bottom: 0.40em;">'.'Dose 12 derniers mois (tous les intervenants) : '.number_format($fod->getDose12moisTotale(),3).' mSv</span></td>';
}
else {
	$value = round($pourcentage, 1).'% de la CdD annuelle OPTIM Industries ('.$fod->getCdDAnnuelle().' mSv)';
	print '<td class="left" style="padding-left: 0px;"><span class="badge  badge-status4 badge-status" title="'.$value.'" style="padding-top: 0.40em;padding-bottom: 0.40em;">'.'Dose 12 derniers mois (tous les intervenants) : '.number_format($fod->getDose12moisTotale(),3).' mSv</span></td>';
}
print '</div><br>';

if ($search_all) {
	foreach ($fieldstosearchall as $key => $val) {
		$fieldstosearchall[$key] = $langs->trans($val);
	}
	print '<div class="divsearchfieldfilter">'.$langs->trans("FilterOnInto", $search_all).join(', ', $fieldstosearchall).'</div>';
}

$varpage = empty($contextpage) ? $_SERVER["PHP_SELF"] : $contextpage;
$selectedfields = $form->multiSelectArrayWithCheckbox('selectedfields', $arrayfields, $varpage); // This also change content of $arrayfields
//$selectedfields .= (count($arrayofmassactions) ? $form->showCheckAddButtons('checkforselect', 1) : '');

print '<div class="div-table-responsive">'; // You can use div-table-responsive-no-min if you dont need reserved height for your table
print '<table class="tagtable nobottomiftotal liste'.($moreforfilter ? " listwithfilterbefore" : "").'">'."\n";


// Fields title search
// --------------------------------------------------------------------
print '<tr class="liste_titre">';
foreach ($object->fields as $key => $val) {
	if($permissiontoreadall && ($key == 'fk_user' || $key == 'date')){
		if (!empty($arrayfields['t.'.$key]['checked'])) {
			print '<td class="liste_titre'.($cssforfield ? ' '.$cssforfield : '').'">';
			if (!empty($val['arrayofkeyval']) && is_array($val['arrayofkeyval'])) {
				print $form->selectarray('search_'.$key, $val['arrayofkeyval'], (isset($search[$key]) ? $search[$key] : ''), 1, 0, 0, '', 1, 0, 0, '', 'maxwidth100', 1);
			} elseif ((strpos($val['type'], 'integer:') === 0) || (strpos($val['type'], 'sellist:') === 0)) {
				print $object->showInputField($val, $key, (isset($search[$key]) ? $search[$key] : ''), '', '', 'search_', 'maxwidth125', 1);
			} elseif (!preg_match('/^(date|timestamp|datetime)/', $val['type'])) {
				print '<input type="text" class="flat maxwidth75" name="search_'.$key.'" value="'.dol_escape_htmltag(isset($search[$key]) ? $search[$key] : '').'">';
			} elseif (preg_match('/^(date|timestamp|datetime)/', $val['type'])) {
				print '<div class="nowrap">';
				print $form->selectDate($search[$key.'_dtstart'] ? $search[$key.'_dtstart'] : '', "search_".$key."_dtstart", 0, 0, 1, '', 1, 0, 0, '', '', '', '', 1, '', $langs->trans('From'));
				print '</div>';
				print '<div class="nowrap">';
				print $form->selectDate($search[$key.'_dtend'] ? $search[$key.'_dtend'] : '', "search_".$key."_dtend", 0, 0, 1, '', 1, 0, 0, '', '', '', '', 1, '', $langs->trans('to'));
				print '</div>';
			}
			print '</td>';
		}
		if ($key == 'fk_user'){
			print '<td class="liste_titre"></td>';
		}

	}
}

// Action column
print '<td class="liste_titre maxwidthsearch">';
$searchpicto = $form->showFilterButtons();
print $searchpicto;
print '</td>';
print '</tr>'."\n";


// Fields title label
// --------------------------------------------------------------------
print '<tr class="liste_titre">';
foreach ($object->fields as $key => $val) {
	if($permissiontoreadall && ($key=='fk_user' || $key=='date')){
		if (!empty($arrayfields['t.'.$key]['checked'])) {
			if ($key == 'date') {
				print '<td></td>';
			}
			else { 
				print getTitleFieldOfList($arrayfields['t.'.$key]['label'], 0, $_SERVER['PHP_SELF'], 't.'.$key, '', $param, ($cssforfield ? 'class="'.$cssforfield.'"' : ''), $sortfield, $sortorder, ($cssforfield ? $cssforfield.' ' : ''))."\n";
			}
		}
		if ($key == 'fk_user') {
			//print '<td>Dose totale</td>';
			print getTitleFieldOfList('Dose totale', 0, $_SERVER['PHP_SELF'], 'total_dose', '', $param, ($cssforfield ? 'class="'.$cssforfield.'"' : ''), $sortfield, $sortorder, ($cssforfield ? $cssforfield.' ' : ''))."\n";
		}
	}
}

// Action column
print getTitleFieldOfList($selectedfields, 0, $_SERVER["PHP_SELF"], '', '', '', '', $sortfield, $sortorder, 'center maxwidthsearch ')."\n";
print '</tr>'."\n";


// Loop on record
// --------------------------------------------------------------------
$i = 0;
$totalarray = array();
$totalarray['nbfield'] = 0;
while ($i < ($limit ? min($num, $limit) : $num)) {
	$obj = $db->fetch_object($resql);
	if (empty($obj)) {
		break; // Should not happen
	}

	// Store properties in $object
	$object->setVarsFromFetchObj($obj);

	// Show here line of result
	print '<tr class="oddeven">';
	foreach ($object->fields as $key => $val) {
		if($permissiontoreadall && ($key == 'fk_user' || $key == 'date')){
			if (!empty($arrayfields['t.'.$key]['checked'])) {

				if ($key == 'date'){
					print '<td></td>';
				}
				else if ($key == 'fk_user'){
					print '<td'.($cssforfield ? ' class="'.$cssforfield.'"' : '').'>';
					print $object->showOutputField($val, $key, $object->$key, '');
					print '</td>';

					$user_ = New ExtendedUser($db);
					$user_->fetch($object->$key);
					//print '<div style="text-align: center;padding-top: 30px;">';
					$pourcentage = ($obj->total_dose/$user_->getCdD())*100;;
					if (($obj->total_dose >= round($user_->getCdD() * ($conf->global->FOD_Pourcentage_RisqueDepassement / 100), 3)) && ($obj->total_dose <= $user_->getCdD())){
						$value = 'ATTENTION : Risque de dépassement de la CdD annuelle  ('.$user_->getCdD().' mSv), prendre les dispositions pour la respecter ('.round($pourcentage, 1).'%)';
						print '<td class="left" style="padding-left: 0px;"><span class="badge  badge-status8 badge-status" title="'.$value.'" style="padding-top: 0.40em;padding-bottom: 0.40em;">'.$obj->total_dose.' mSv</span></td>';
					}
					else if ($obj->total_dose > $user_->getCdD()){
						$value = 'ATTENTION : Dépassement de la CdD annuelle ('.$user_->getCdD().' mSv), autorisation accès en ZC suspendue ('.round($pourcentage, 1).'%)';
						print '<td class="left" style="padding-left: 0px;"><span class="badge  badge-status8 badge-status" title="'.$value.'" style="padding-top: 0.40em;padding-bottom: 0.40em;">'.$obj->total_dose.' mSv</span></td>';
					}
					else {
						$value = round($pourcentage, 1).'% de la CdD annuelle ('.$user_->getCdD().' mSv)';
						print '<td class="left" style="padding-left: 0px;"><span class="badge  badge-status4 badge-status" title="'.$value.'" style="padding-top: 0.40em;padding-bottom: 0.40em;">'.$obj->total_dose.' mSv</span></td>';
					}
					//print '</div>';

					//print '<td>'.$obj->total_dose.'</td>';
				}
			}
		}
	}

	// Action column
	print '<td class="nowrap center">';
	print '</td>';

	if (!$i) {
		$totalarray['nbfield']++;
	}

	print '</tr>'."\n";
	$i++;
}

// Show total line
// Move fields of totalizable into the common array pos and val
/*if (!empty($totalarray['totalizable']) && is_array($totalarray['totalizable'])) {
	foreach ($totalarray['totalizable'] as $keytotalizable => $valtotalizable) {
		$totalarray['pos'][$valtotalizable['pos']] = $keytotalizable;
		$totalarray['val'][$keytotalizable] = $valtotalizable['total'];
	}
}

// Show total line
$user_extend = new ExtendedUser($db);
if(!$permissiontoreadall){
	$user_extend->fetch($user->id);
}
else if (!empty($search['fk_user']) && $search['fk_user'] != -1){
	$user_extend->fetch($search['fk_user']);
}
if (isset($totalarray['pos'])) {
	print '<tr class="liste_total">';
	$i = 0;
	while ($i < $totalarray['nbfield']) {
		$i++;
		if (!empty($totalarray['pos'][$i])) {
			if (!$permissiontoreadall || (!empty($search['fk_user']) && $search['fk_user'] != -1)){
				if ($user_extend->GetCdD() != 0){
					$pourcentage = ($totalarray['val'][$totalarray['pos'][$i]]/$user_extend->GetCdD())*100;
					if (($totalarray['val'][$totalarray['pos'][$i]] >= $user_extend->GetCdD() * 0.9) && ($totalarray['val'][$totalarray['pos'][$i]] <= $user_extend->GetCdD())){
						$value = 'ATTENTION : Risque de dépassement de la CdD annuelle ('.floor($pourcentage).'%)';
						print '<td class="left" style="padding-left: 0px;"><span class="badge  badge-status8 badge-status" title="'.$value.'">'.number_format($totalarray['val'][$totalarray['pos'][$i]],3).'</span></td>';
					}
					else if ($totalarray['val'][$totalarray['pos'][$i]] > $user_extend->GetCdD()){
						$value = 'ATTENTION : Dépassement de la CdD annuelle, autorisation accès en ZC suspendue ('.floor($pourcentage).'%)';
						print '<td class="left" style="padding-left: 0px;"><span class="badge  badge-status8 badge-status" title="'.$value.'">'.number_format($totalarray['val'][$totalarray['pos'][$i]],3).'</span></td>';
					}
					else {
						$value = floor($pourcentage).'% de la CdD';
						print '<td class="left" style="padding-left: 0px;"><span class="badge  badge-status4 badge-status" title="'.$value.'">'.number_format($totalarray['val'][$totalarray['pos'][$i]],3).'</span></td>';
					}
				}
			}
			else {
				print '<td class="left">'.price($totalarray['val'][$totalarray['pos'][$i]]).'</td>';
			}
		} else {
			if ($i == 1) {
				if (is_null($limit) || $num < $limit) {
					print '<td>'.$langs->trans("Total").'</td>';
				} else {
					print '<td>';
					if (is_object($form)) {
						print $form->textwithpicto($langs->trans("Total"), $langs->transnoentitiesnoconv("Totalforthispage"));
					} else {
						print $langs->trans("Totalforthispage");
					}
					print '</td>';
				}
			} else {
				print '<td></td>';
			}
		}
	}
	print '</tr>';
}*/

// If no record found
if ($num == 0) {
	$colspan = 1;
	foreach ($arrayfields as $key => $val) {
		if (!empty($val['checked'])) {
			$colspan++;
		}
	}
	print '<tr><td colspan="'.$colspan.'" class="opacitymedium">'.$langs->trans("NoRecordFound").'</td></tr>';
}


$db->free($resql);

print '</table>'."\n";
print '</div>'."\n";
print '</form>'."\n";

// End of page
llxFooter();
$db->close();
